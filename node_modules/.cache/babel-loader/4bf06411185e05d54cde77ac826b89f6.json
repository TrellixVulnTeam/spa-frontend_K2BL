{"ast":null,"code":"import store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then(data => {\n    let action = {\n      type: 'users/set',\n      data: data\n    };\n    store.dispatch(action);\n  });\n}\nexport function fetch_posts() {\n  api_get(\"/posts\").then(data => {\n    let action = {\n      type: 'posts/set',\n      data: data\n    };\n    store.dispatch(action);\n  });\n}\nexport function api_login(name, password) {\n  api_post(\"/session\", {\n    name,\n    password\n  }).then(data => {\n    console.log(\"login resp\", data);\n\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      };\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n  });\n}\nexport function create_user(user) {\n  return api_post(\"/users\", {\n    user\n  });\n}\nexport async function create_post(post) {\n  var _state$session;\n\n  let state = store.getState();\n  let token = state === null || state === void 0 ? void 0 : (_state$session = state.session) === null || _state$session === void 0 ? void 0 : _state$session.token;\n  let data = new FormData();\n  data.append(\"post[eventname]\", post.eventname);\n  data.append(\"post[date]\", post.date);\n  data.append(\"post[body]\", post.body);\n  let opts = {\n    method: 'POST',\n    body: data,\n    headers: {\n      'x-auth': token\n    } // fetch will magically do the right thing\n    // with our FormData:\n    //  - It's going to read the file\n    //  - It's going to pick correct headers\n    //  - multipart-form-data\n\n  };\n  let text = await fetch(\"http://localhost:4000/api/v1/posts\", opts);\n  return await text.json();\n}\nexport function load_defaults() {\n  fetch_posts();\n  fetch_users();\n}","map":{"version":3,"sources":["/Users/jimhowe/Desktop/hw09-back-11/web-ui/src/api.js"],"names":["store","api_get","path","text","fetch","resp","json","data","api_post","opts","method","headers","body","JSON","stringify","fetch_users","then","action","type","dispatch","fetch_posts","api_login","name","password","console","log","session","error","create_user","user","create_post","post","state","getState","token","FormData","append","eventname","date","load_defaults"],"mappings":"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","sourcesContent":["\nimport store from './store';\n\nasync function api_get(path) {\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, {});\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1\" + path, opts);\n  return await text.json();\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then((data) => {\n    let action = {\n      type: 'users/set',\n      data: data,\n    }\n    store.dispatch(action);\n  });\n}\n\nexport function fetch_posts() {\n  api_get(\"/posts\").then((data) => {\n    let action = {\n      type: 'posts/set',\n      data: data,\n    }\n    store.dispatch(action);\n  });\n}\n\nexport function api_login(name, password) {\n  api_post(\"/session\", {name, password}).then((data) => {\n    console.log(\"login resp\", data);\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n     let action = {\n        type: 'error/set',\n        data: data.error,\n      }\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function create_user(user) {\n  return api_post(\"/users\", {user});\n}\n\nexport async function create_post(post) {\n  let state = store.getState();\n  let token = state?.session?.token;\n\n  let data = new FormData();\n  data.append(\"post[eventname]\", post.eventname);\n  data.append(\"post[date]\", post.date);\n  data.append(\"post[body]\", post.body);\n  let opts = {\n    method: 'POST',\n    body: data,\n    headers: {\n      'x-auth': token,\n    },\n    // fetch will magically do the right thing\n    // with our FormData:\n    //  - It's going to read the file\n    //  - It's going to pick correct headers\n    //  - multipart-form-data\n  };\n  let text = await fetch(\n    \"http://localhost:4000/api/v1/posts\", opts);\n  return await text.json();\n}\n\n\nexport function load_defaults() {\n  fetch_posts();\n  fetch_users();\n}\n"]},"metadata":{},"sourceType":"module"}